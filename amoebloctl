#!/bin/sh
#
# ac.sh - Manage a Terraform-provisioned Kind cluster with these commands:
#
#   help    : Show this help
#   check   : Validate Docker, Terraform, and kubectl
#   up      : Deploy or upgrade the cluster (terraform apply)
#   down    : Destroy the cluster (terraform destroy)
#   unseal  : Wait for "amoebius-0" to have 2 containers, then unseal Vault
#   exec    : Open a bash shell in the "amoebius-0" pod (amoebius container)
#   status  : Check cluster, Linkerd readiness, Vault sealed/unsealed
#
# Usage:
#   ./ac.sh [command]
#
# This script expects:
#   - Terraform configuration in "terraform/roots/deploy/local".
#   - A "kubeconfig" file in the current directory (if you want `kubectl` to point
#     to the correct cluster automatically).

set -eu  # Exit on error (-e) or when referencing uninitialized variables (-u).

##############################################################################
# MINIMAL VERSIONS -- Adjust as needed
##############################################################################
MIN_DOCKER_VERSION="27.5"
MIN_TERRAFORM_VERSION="1.10.0"
MIN_KUBECTL_VERSION="1.32"

##############################################################################
# Print usage/help
##############################################################################
print_help() {
  cat <<EOF
Usage: $0 [command]

Commands:
  help
    Show this help message.

  check
    Confirms Docker, Terraform, and kubectl meet minimum versions
    and that the Docker daemon is running.

  up
    Runs 'terraform apply' in "terraform/roots/deploy/local" to provision
    or update the Kind cluster and associated resources.

  down
    Runs 'terraform destroy' in "terraform/roots/deploy/local" to tear down
    the Kind cluster and all resources.

  unseal
    Waits for the "amoebius-0" pod to have 2 containers (Vault + Linkerd),
    then interactively unseals Vault with "amoebctl secrets.vault unseal".

  exec
    Opens a bash shell inside the "amoebius-0" pod (amoebius container),
    useful for debugging or maintenance within the container.

  status
    1) Checks if the Kind cluster is running (kubectl get nodes).
    2) Ensures Linkerd is deployed and pods are ready.
    3) Checks the vault namespace for pods, and if any, determines
       whether Vault is sealed or unsealed.

Examples:
  $0 up
  $0 status
  $0 unseal
  $0 down
EOF
}

##############################################################################
# Compare two semantic versions (e.g. 1.23.4 vs 1.20.0).
# Return 0 if ver1 >= ver2, else 1.
##############################################################################
version_ge() {
  ver1="$1"
  ver2="$2"

  major1=$(echo "$ver1" | cut -d. -f1)
  minor1=$(echo "$ver1" | cut -d. -f2)
  patch1=$(echo "$ver1" | cut -d. -f3)
  [ -z "$minor1" ] && minor1=0
  [ -z "$patch1" ] && patch1=0

  major2=$(echo "$ver2" | cut -d. -f1)
  minor2=$(echo "$ver2" | cut -d. -f2)
  patch2=$(echo "$ver2" | cut -d. -f3)
  [ -z "$minor2" ] && minor2=0
  [ -z "$patch2" ] && patch2=0

  if [ "$major1" -gt "$major2" ]; then
    return 0
  elif [ "$major1" -lt "$major2" ]; then
    return 1
  fi

  if [ "$minor1" -gt "$minor2" ]; then
    return 0
  elif [ "$minor1" -lt "$minor2" ]; then
    return 1
  fi

  if [ "$patch1" -gt "$patch2" ]; then
    return 0
  elif [ "$patch1" -lt "$patch2" ]; then
    return 1
  fi

  # Equal
  return 0
}

##############################################################################
# Check Docker, Terraform, and kubectl, ensure Docker daemon is up
#   $1 (optional) "silent" => only print errors, not success messages.
##############################################################################
check_requirements() {
  mode="${1:-}"

  # Docker
  if ! command -v docker >/dev/null 2>&1; then
    echo "ERROR: docker not found in PATH."
    exit 1
  fi
  docker_version_str=$(docker --version 2>/dev/null | sed -n 's/^[Dd]ocker [Vv]ersion \([0-9][0-9.]*\).*/\1/p')
  if [ -z "$docker_version_str" ]; then
    echo "ERROR: Unable to parse Docker version."
    exit 1
  fi
  if ! version_ge "$docker_version_str" "$MIN_DOCKER_VERSION"; then
    echo "ERROR: Docker version $docker_version_str is less than required $MIN_DOCKER_VERSION"
    exit 1
  fi
  if ! docker info >/dev/null 2>&1; then
    echo "ERROR: Docker daemon not running or not accessible."
    exit 1
  fi

  # Terraform
  if ! command -v terraform >/dev/null 2>&1; then
    echo "ERROR: terraform not found in PATH."
    exit 1
  fi
  tf_version_str=$(terraform version 2>/dev/null | sed -n '1s/^Terraform v*\([0-9.]*\).*/\1/p')
  if [ -z "$tf_version_str" ]; then
    echo "ERROR: Unable to parse Terraform version."
    exit 1
  fi
  if ! version_ge "$tf_version_str" "$MIN_TERRAFORM_VERSION"; then
    echo "ERROR: Terraform version $tf_version_str is less than required $MIN_TERRAFORM_VERSION"
    exit 1
  fi

  # kubectl
  if ! command -v kubectl >/dev/null 2>&1; then
    echo "ERROR: kubectl not found in PATH."
    exit 1
  fi
  kb_version_str=$(kubectl version --client 2>/dev/null | sed -n 's/^Client Version: v\{0,1\}\([0-9.]*\).*/\1/p')
  if [ -z "$kb_version_str" ]; then
    echo "ERROR: Unable to parse kubectl version."
    exit 1
  fi
  if ! version_ge "$kb_version_str" "$MIN_KUBECTL_VERSION"; then
    echo "ERROR: kubectl version $kb_version_str is less than required $MIN_KUBECTL_VERSION"
    exit 1
  fi

  if [ "$mode" != "silent" ]; then
    echo "All requirements met:"
    echo "  Docker     >= $MIN_DOCKER_VERSION (found $docker_version_str)"
    echo "  Terraform >= $MIN_TERRAFORM_VERSION (found $tf_version_str)"
    echo "  kubectl   >= $MIN_KUBECTL_VERSION (found $kb_version_str)"
  fi
}

##############################################################################
# Wait for "amoebius-0" to have 2 containers, then confirm it's Ready.
##############################################################################
wait_for_amoebius_pod() {
  pod="amoebius-0"
  ns="amoebius"

  echo "Ensuring Linkerd injection is complete in pod/$pod (expecting 2 containers)..."
  while true
  do
    container_count=$(kubectl get pod "$pod" -n "$ns" -o jsonpath='{.spec.containers[*].name}' 2>/dev/null \
      | wc -w | tr -d '[:space:]')
    if [ "$container_count" -ge 2 ] 2>/dev/null; then
      break
    fi
    echo "  Current container count in $pod: $container_count. Retrying in 5s..."
    sleep 5
  done

  echo "Waiting for pod/$pod to become Ready..."
  kubectl wait --for=condition=Ready pod/"$pod" -n "$ns" --timeout=300s
  echo "Pod/$pod is Ready with 2 containers."
}

##############################################################################
# Temporarily set KUBECONFIG to "./kubeconfig" if it exists,
# so kubectl commands reference the correct cluster for this script session.
##############################################################################
export_if_kubeconfig_exists() {
  kube_file="${PWD}/kubeconfig"
  if [ -f "$kube_file" ]; then
    export KUBECONFIG="$kube_file"
  fi
}

##############################################################################
# status: checks cluster, Linkerd, Vault sealed/unsealed.
#
# Implementation detail: we do a short (1s) readiness wait for Linkerd/Vault
# in code. We don't mention "1s" to the user; we only show final results.
##############################################################################
print_status() {
  echo "=== Status Report ==="

  # 1) Is cluster up?
  if ! kubectl get nodes >/dev/null 2>&1; then
    echo "Kind cluster: NOT RUNNING or unreachable"
    return 0
  fi
  echo "Kind cluster: RUNNING"

  # 2) Linkerd
  echo ""
  echo "=== Checking Linkerd ==="
  if ! kubectl get ns linkerd >/dev/null 2>&1; then
    echo "Linkerd: NOT DEPLOYED"
  else
    # We do a short readiness wait in code; if it fails, we say "Not fully ready"
    if kubectl wait --for=condition=Ready pods -n linkerd --all --timeout=1s >/dev/null 2>&1; then
      echo "Linkerd: READY"
    else
      echo "Linkerd: NOT FULLY READY"
    fi
  fi

  # 3) Vault
  echo ""
  echo "=== Checking Vault ==="
  vault_pods=$(kubectl -n vault get pods --no-headers 2>/dev/null || true)
  if [ -z "$vault_pods" ]; then
    echo "Vault: NOT DEPLOYED (no pods in 'vault' namespace)"
  else
    # We do a short readiness wait in code; if it fails, we say "sealed or partial"
    if kubectl wait --for=condition=Ready pods -n vault --all --timeout=1s >/dev/null 2>&1; then
      echo "Vault: UNSEALED"
    else
      echo "Vault: SEALED OR PARTIALLY READY"
    fi
  fi

  echo ""
  echo "=== End Status ==="
}

##############################################################################
# Main
##############################################################################
cmd="${1:-}"

if [ -z "$cmd" ]; then
  cmd="help"
fi

case "$cmd" in
  help)
    print_help
    ;;
  check)
    check_requirements
    ;;
  up)
    check_requirements "silent"
    terraform -chdir=terraform/roots/deploy/local init
    terraform -chdir=terraform/roots/deploy/local apply -auto-approve
    ;;
  down)
    check_requirements "silent"
    terraform -chdir=terraform/roots/deploy/local destroy -auto-approve
    ;;
  unseal)
    check_requirements "silent"
    export_if_kubeconfig_exists

    wait_for_amoebius_pod

    echo "Unsealing Vault in pod 'amoebius-0'..."
    kubectl exec -n amoebius -c amoebius -it amoebius-0 -- amoebctl secrets.vault unseal
    ;;
  exec)
    check_requirements "silent"
    export_if_kubeconfig_exists
    echo "Opening a bash shell in pod 'amoebius-0' (amoebius container)..."
    kubectl exec -n amoebius -c amoebius -it amoebius-0 -- bash
    ;;
  status)
    check_requirements "silent"
    export_if_kubeconfig_exists
    print_status
    ;;
  *)
    echo "ERROR: Unrecognized command '$cmd'"
    echo
    print_help
    exit 1
    ;;
esac