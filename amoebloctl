#!/bin/sh
#
# amoebloctl.sh - Manage a Terraform-provisioned Kind cluster with these commands:
#
#   help    : Show this help
#   check   : Validate Docker, Terraform, and kubectl
#   up      : Deploy or upgrade the cluster (terraform apply)
#             Optional flag: --local-build (build local Docker image -> .tar)
#   down    : Destroy the cluster (terraform destroy)
#   unseal  : Wait for "amoebius-0" to have 2 containers, then unseal Vault
#   shell   : Open a bash shell in the "amoebius-0" pod (amoebius container)
#   status  : Check cluster, Linkerd readiness, Vault sealed/unsealed
#
# Note:
#   A new Terraform variable "mount_docker_socket" (default: true) is available
#   if you want to conditionally mount /var/run/docker.sock for the Kind container.
#
# Usage:
#   ./amoebloctl.sh [command] [options]
#
# With 'up --local-build', we build the Docker image "amoebius:local" into a tarball
# (data/images/amoebius.tar). Terraform will then load it into Kind by referencing
# the tarball.
#

set -eu  # Exit on error (-e) or uninitialized var usage (-u).

##############################################################################
# MINIMAL VERSIONS (adjust to your environment)
##############################################################################
MIN_DOCKER_VERSION="27.5"
MIN_TERRAFORM_VERSION="1.10.0"
MIN_KUBECTL_VERSION="1.32"

##############################################################################
# Help message
##############################################################################
print_help() {
  cat <<EOF
Usage: $0 [command] [options]

Commands:
  help
    Show this help message.

  check
    Checks Docker, Terraform, and kubectl minimum versions and Docker daemon.

  up [--local-build]
    Runs 'terraform apply' in "terraform/roots/deploy/local_bootstrap" to bring up
    the Kind cluster and resources. If '--local-build' is specified,
    we build/save 'amoebius:local' as data/images/amoebius.tar first,
    and Terraform will load that tarball into Kind.

  down
    Runs 'terraform destroy' in "terraform/roots/deploy/local_bootstrap" to tear down
    the Kind cluster.

  unseal
    Waits for "amoebius-0" to have 2 containers (Vault + Linkerd), then uses
    "amoebctl secrets.vault unseal" inside that pod.

  shell
    Opens a bash shell inside "amoebius-0" (amoebius container).

  status
    Checks if the Kind cluster is running, verifies Linkerd readiness,
    and checks Vault sealed/unsealed status.

Examples:
  $0 up
  $0 up --local-build
  $0 status
  $0 unseal
  $0 down
EOF
}

##############################################################################
# version_ge: Return 0 if ver1 >= ver2, else 1
##############################################################################
version_ge() {
  ver1="$1"
  ver2="$2"

  major1=$(echo "$ver1" | cut -d. -f1)
  minor1=$(echo "$ver1" | cut -d. -f2)
  patch1=$(echo "$ver1" | cut -d. -f3)
  [ -z "$minor1" ] && minor1=0
  [ -z "$patch1" ] && patch1=0

  major2=$(echo "$ver2" | cut -d. -f1)
  minor2=$(echo "$ver2" | cut -d. -f2)
  patch2=$(echo "$ver2" | cut -d. -f3)
  [ -z "$minor2" ] && minor2=0
  [ -z "$patch2" ] && patch2=0

  if [ "$major1" -gt "$major2" ]; then
    return 0
  elif [ "$major1" -lt "$major2" ]; then
    return 1
  fi

  if [ "$minor1" -gt "$minor2" ]; then
    return 0
  elif [ "$minor1" -lt "$minor2" ]; then
    return 1
  fi

  if [ "$patch1" -gt "$patch2" ]; then
    return 0
  elif [ "$patch1" -lt "$patch2" ]; then
    return 1
  fi

  return 0  # equal
}

##############################################################################
# check_requirements
##############################################################################
check_requirements() {
  mode="${1:-}"

  # Docker
  if ! command -v docker >/dev/null 2>&1; then
    echo "ERROR: docker not found in PATH."
    exit 1
  fi
  docker_version_str=$(docker --version 2>/dev/null | sed -n 's/^[Dd]ocker [Vv]ersion \([0-9][0-9.]*\).*/\1/p')
  if [ -z "$docker_version_str" ]; then
    echo "ERROR: Unable to parse Docker version."
    exit 1
  fi
  if ! version_ge "$docker_version_str" "$MIN_DOCKER_VERSION"; then
    echo "ERROR: Docker version $docker_version_str is less than required $MIN_DOCKER_VERSION"
    exit 1
  fi
  if ! docker info >/dev/null 2>&1; then
    echo "ERROR: Docker daemon not running or not accessible."
    exit 1
  fi

  # Terraform
  if ! command -v terraform >/dev/null 2>&1; then
    echo "ERROR: terraform not found in PATH."
    exit 1
  fi
  tf_version_str=$(terraform version 2>/dev/null | sed -n '1s/^Terraform v*\([0-9.]*\).*/\1/p')
  if [ -z "$tf_version_str" ]; then
    echo "ERROR: Unable to parse Terraform version."
    exit 1
  fi
  if ! version_ge "$tf_version_str" "$MIN_TERRAFORM_VERSION"; then
    echo "ERROR: Terraform version $tf_version_str is less than required $MIN_TERRAFORM_VERSION"
    exit 1
  fi

  # kubectl
  if ! command -v kubectl >/dev/null 2>&1; then
    echo "ERROR: kubectl not found in PATH."
    exit 1
  fi
  kb_version_str=$(kubectl version --client 2>/dev/null | sed -n 's/^Client Version: v\{0,1\}\([0-9.]*\).*/\1/p')
  if [ -z "$kb_version_str" ]; then
    echo "ERROR: Unable to parse kubectl version."
    exit 1
  fi
  if ! version_ge "$kb_version_str" "$MIN_KUBECTL_VERSION"; then
    echo "ERROR: kubectl version $kb_version_str is less than required $MIN_KUBECTL_VERSION"
    exit 1
  fi

  if [ "$mode" != "silent" ]; then
    echo "All requirements met:"
    echo "  Docker     >= $MIN_DOCKER_VERSION (found $docker_version_str)"
    echo "  Terraform >= $MIN_TERRAFORM_VERSION (found $tf_version_str)"
    echo "  kubectl   >= $MIN_KUBECTL_VERSION (found $kb_version_str)"
  fi
}

##############################################################################
# wait_for_amoebius_pod
##############################################################################
wait_for_amoebius_pod() {
  pod="amoebius-0"
  ns="amoebius"

  echo "Ensuring Linkerd injection in pod/$pod (expecting 2 containers)..."
  container_count=$(kubectl get pod "$pod" -n "$ns" -o jsonpath='{.spec.containers[*].name}' 2>/dev/null | wc -w | tr -d '[:space:]')

  # If container count < 2, Linkerd is not injected
  if [ "$container_count" -lt 2 ] 2>/dev/null; then
    echo "linkerd not deployed yet"
    exit 1
  fi

  echo "Waiting for pod/$pod to become Ready..."
  kubectl wait --for=condition=Ready pod/"$pod" -n "$ns" --timeout=300s
  echo "Pod/$pod is Ready with $container_count containers."
}

##############################################################################
# export_if_kubeconfig_exists
##############################################################################
export_if_kubeconfig_exists() {
  local kube_file="${PWD}/kubeconfig"
  if [ -f "$kube_file" ]; then
    export KUBECONFIG="$kube_file"
  fi
}

##############################################################################
# print_status
##############################################################################
print_status() {
  echo "=== Status Report ==="
  # 1) cluster
  if ! kubectl get nodes >/dev/null 2>&1; then
    echo "Kind cluster: NOT RUNNING or unreachable"
    return 0
  fi
  echo "Kind cluster: RUNNING"

  echo ""
  echo "=== Checking Linkerd ==="
  if ! kubectl get ns linkerd >/dev/null 2>&1; then
    echo "Linkerd: NOT DEPLOYED"
  else
    if kubectl wait --for=condition=Ready pods -n linkerd --all --timeout=1s >/dev/null 2>&1; then
      echo "Linkerd: READY"
    else
      echo "Linkerd: NOT FULLY READY"
    fi
  fi

  echo ""
  echo "=== Checking Vault ==="
  vault_pods=$(kubectl -n vault get pods --no-headers 2>/dev/null || true)
  if [ -z "$vault_pods" ]; then
    echo "Vault: NOT DEPLOYED (no pods in 'vault' namespace)"
  else
    if kubectl wait --for=condition=Ready pods -n vault --all --timeout=1s >/dev/null 2>&1; then
      echo "Vault: UNSEALED"
    else
      echo "Vault: SEALED OR PARTIALLY READY"
    fi
  fi

  echo ""
  echo "=== End Status ==="
}

##############################################################################
# Main
##############################################################################
cmd="${1:-}"

if [ -z "$cmd" ]; then
  cmd="help"
fi

case "$cmd" in
  help)
    print_help
    ;;
  check)
    check_requirements
    ;;
  up)
    shift
    local_build=false
    if [ "${1:-}" = "--local-build" ]; then
      local_build=true
    fi

    check_requirements "silent"
    terraform -chdir=terraform/roots/deploy/local_bootstrap init

    if [ "$local_build" = "true" ]; then
      echo "[up] --local-build specified. Preparing data/images/amoebius.tar..."

      # 1) Ensure the data/images directory exists (idempotent)
      mkdir -p data/images

      # 2) Build+save the tar if it doesn't already exist
      if [ ! -f data/images/amoebius.tar ]; then
        echo "[up] data/images/amoebius.tar not found. Building Docker image 'amoebius:local'..."
        (
          cd docker
          docker build \
            -t amoebius:local \
            -f ./amoebius/Dockerfile \
            ..
        )
        echo "[up] Saving image to data/images/amoebius.tar..."
        docker save -o data/images/amoebius.tar amoebius:local
      else
        echo "[up] data/images/amoebius.tar already exists. Skipping docker build."
      fi

      echo "[up] Running 'terraform apply' with local_build_enabled=true..."
      terraform -chdir=terraform/roots/deploy/local_bootstrap apply \
        -auto-approve \
        -var "local_build_enabled=true"
    else
      echo "[up] Running 'terraform apply' (no local build)..."
      terraform -chdir=terraform/roots/deploy/local_bootstrap apply -auto-approve
    fi
    ;;
  down)
    check_requirements "silent"
    terraform -chdir=terraform/roots/deploy/local_bootstrap destroy -auto-approve
    ;;
  unseal)
    check_requirements "silent"
    export_if_kubeconfig_exists
    wait_for_amoebius_pod
    echo "Unsealing Vault in pod 'amoebius-0'..."
    kubectl exec -n amoebius -c amoebius -it amoebius-0 -- amoebctl secrets.vault unseal
    ;;
  shell)
    check_requirements "silent"
    export_if_kubeconfig_exists
    echo "Opening a bash shell in pod 'amoebius-0' (amoebius container)..."
    kubectl exec -n amoebius -c amoebius -it amoebius-0 -- bash
    ;;
  status)
    check_requirements "silent"
    export_if_kubeconfig_exists
    print_status
    ;;
  *)
    echo "ERROR: Unrecognized command '$cmd'"
    echo
    print_help
    exit 1
    ;;
esac